// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  name     String?
  email    String? @unique
  password String?

  notifications UserNotification[]

  flashes      Flash[]            @relation("flashes")
  likedFlashes UserLikedFlashes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Notifications
model Notification {
  id       String    @id @default(cuid())
  title    String
  message  String
  sendDate DateTime?
  
  isActive Boolean   @default(true)
  isSent   Boolean   @default(false)

  targets UserNotification[]

  model String?

  template           String? @default("default")
  customEmailMessage String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserNotification {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id])

  read    Boolean @default(false)
  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Flashes
model Flash {
  id        String  @id @default(cuid())
  title     String?
  content   String?
  isComment Boolean @default(false)

  related Flash[] @relation("FlashComments")
  refId   String?
  ref     Flash?  @relation("FlashComments", fields: [refId], references: [id])

  authorId String
  author   User   @relation("flashes", fields: [authorId], references: [id])

  likes      UserLikedFlashes[]
  likesCount Int                @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId, refId])
}

model UserLikedFlashes {
  flashId   String
  flash     Flash    @relation(fields: [flashId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@id([flashId, userId])
}
